import re
from typing import Iterable

# 숫자 토큰 내 오인식 보정 맵
_TRANS_NUM = str.maketrans({
    "O": "0", "o": "0", "D": "0",
    "i": "1", "l": "1", "I": "1",
    "Z": "7", "S": "5", "B": "8",
})

def token_has_digit(tok: str) -> bool:
    return bool(re.search(r"\d", tok))

def clean_text_generic(text: str) -> str:
    """
    OCR 텍스트에서 시각적 구분자 제거 및 공백 정리(안전 영역).
    """
    out_lines = []
    for line in text.splitlines():
        line = re.sub(r"[|;+:{}!]", " ", line)
        line = re.sub(r"\s+", " ", line).strip()
        if line:
            out_lines.append(line)
    return "\n".join(out_lines)

def normalize_numbers(text: str) -> str:
    """
    숫자를 포함한 토큰에 한해 O/D→0, i/l/I→1, Z→7, S→5, B→8 치환.
    """
    fixed_lines = []
    for line in text.splitlines():
        toks = line.split()
        fixed_lines.append(" ".join(t.translate(_TRANS_NUM) if token_has_digit(t) else t for t in toks))
    return "\n".join(fixed_lines)

def normalize_units(text: str) -> str:
    """
    단위 표기 최소 보정:
      - 'm 9' / 'm9' / 'm q' → 'mg'
      - µ/μ/全각% → 통일(µ,μ→'u', ％→%)
      - 마이크로그램 기호 '㎍' → 'ug'
    """
    # mg 오인식 보정
    text = re.sub(r"(?i)\bm\s*9\b", "mg", text)
    text = re.sub(r"(?i)\bm\s*q\b", "mg", text)

    # 마이크로/퍼센트 통일
    text = text.replace("µ", "u").replace("μ", "u").replace("㎍", "ug")
    text = text.replace("％", "%")
    return text

def pipeline(text: str, steps: Iterable[str] = ("clean", "num", "unit")) -> str:
    """
    조합형 파이프라인. 필요 단계만 선택 가능.
      steps: "clean" | "num" | "unit"
    """
    for s in steps:
        if s == "clean":
            text = clean_text_generic(text)
        elif s == "num":
            text = normalize_numbers(text)
        elif s == "unit":
            text = normalize_units(text)
    return text
